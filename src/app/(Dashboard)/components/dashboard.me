"use client";
import axios from 'axios';
import { useSession } from 'next-auth/react';
import { Suspense, useEffect, useState } from 'react';
import TaskCard from './TaskCard';
import Carousel from '@/components/Carousel';
import { GetServerLoading } from '@/utils/GetServerLoading';
import useSidebarWidth from '@/store/sidebarWidth';
import useTasks from '@/store/tasks';
export default function Dashboard() {
  const { data } = useSession()
  const [session, setSession] = useState(null)
  const [activeTask, setActiveTask] = useState([]);
  const [availableTask, setAvailableTask] = useState([]);
  const [selectedTaskLoading, setselectedTaskLoading] = useState(false)
  const { width } = useSidebarWidth();
  const { activeTasks, fetchedTasks, setFetchedTasks } = useTasks()

  useEffect(() => {
    setSession(data)
  }, [data])

  useEffect(() => {
    if (session) {
      fetchOrders()
    }
  }, [session])

  useEffect(() => {
    if (fetchedTasks) {
      fetchOrders()
      setFetchedTasks(false)
    }
  }, [fetchedTasks])

  useEffect(() => {
    if (activeTasks) {
      setActiveTask(activeTasks)
    }
  }, [activeTasks])

  console.log('dashboard', activeTasks)


  const fetchOrders = async () => {
    console.log(session)
    try {
      const res = await axios.post('/api/availableTasks', {
        role: session.user.role
      })
      if (res.statusText === 'OK') {
        setAvailableTask(res.data.data)
      }
    } catch (error) {
      console.error(error.response.data);
    }
  }

  if (!data) {
    return (
      <GetServerLoading session={data} />
    )
  }

  return (
    <>
      <div className='flex flex-col justify-start items-start gap-12 font-inter w-full'>
        <div className='flex flex-col justify-start items-start gap-3 font-inter pt-3'>
          <h2 className='text-6xl font-semibold max-sm:text-2xl'>Welcome back,
            <span className='capitalize'>
              {session?.user.username}</span>
          </h2>
          <p className='max-sm:text-sm'>Here's an overview of your tasks and projects</p>
        </div>
        <div className='space-y-4 w-fit relative max-sm:gap-3
      '>
          <h2 className='border-l-6 border-l-[#ff7e6e] rounded-xs
      text-2xl font-medium font-inter px-4 max-sm:text-lg'>Active Task</h2>
          {/* <ActiveTask /> */}
          <Suspense
            fallback={<GetServerLoading session={data} />}>
            <div className={`grid ${width ? 'grid-cols-4 max-md:grid-cols-2 max-lg:grid-cols-2 max-xl:grid-cols-3' :
              'grid-cols-3 max-lg:grid-cols-1 max-md:grid-cols-1 max-xl:grid-cols-2'}
              gap-4 max-sm:grid-cols-1 max-xs:grid-cols-1`}>
              {activeTask.length > 0 && activeTask.map((item, index) => (
                <TaskCard
                  key={index}
                  badge='active'
                  isLoading={selectedTaskLoading}
                  session={session}
                  index={index}
                  title={item.musicTemplate}
                  des={item.jokes}
                  plan={item.plan}
                  songGenre={item.songGenre}
                  item={item}
                  bgStory={item.backgroundStory}
                  currentStage={item.currentStage} />
              ))}
            </div>
          </Suspense>
        </div>
        <div
          className='space-y-4 w-full relative max-sm:gap-3 overflow-x-hidden'
        >
          <h2 className='border-l-6 border-l-[#0e8fd5] rounded-xs
text-2xl font-medium font-inter px-4 max-sm:text-lg'>Available Task</h2>
          <Suspense
            fallback={<GetServerLoading session={data} />}>
            <div className={`grid ${width ? 'grid-cols-4 max-md:grid-cols-2 max-lg:grid-cols-2 max-xl:grid-cols-3' :
              'grid-cols-3 max-lg:grid-cols-1 max-md:grid-cols-1 max-xl:grid-cols-2'}
              gap-4 max-sm:grid-cols-1 max-xs:grid-cols-1`}>
              {availableTask.length > 0 && availableTask.map((item, index) => (
                <TaskCard
                  key={index}
                  isLoading={selectedTaskLoading}
                  session={session}
                  index={index}
                  title={item.musicTemplate}
                  des={item.jokes}
                  plan={item.plan}
                  songGenre={item.songGenre}
                  item={item}
                  bgStory={item.backgroundStory}
                  currentStage={item.currentStage} />
              ))}
            </div>
          </Suspense>
        </div>
      </div>
    </>
  )
}
